pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: docker:24-dind
    securityContext:
      privileged: true
    command:
    - sleep
    args:
    - 99d
    env:
    - name: DOCKER_TLS_CERTDIR
      value: ""
  - name: kubectl
    image: bitnami/kubectl:1.28
    command:
    - sleep
    args:
    - 99d
"""
        }
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '15'))
        timeout(time: 15, unit: 'MINUTES')
    }
    
    environment {
        APP_NAME = 'sample-app'
        NAMESPACE = 'applications'
        DOCKER_IMAGE = "sample-app"
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Build Docker Image') {
            steps {
                container('docker') {
                    dir('app/sample-app') {
                        sh "docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} ."
                        sh "docker tag ${DOCKER_IMAGE}:${IMAGE_TAG} ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                container('kubectl') {
                    sh """
                        kubectl set image deployment/${APP_NAME} ${APP_NAME}=${DOCKER_IMAGE}:${IMAGE_TAG} -n ${NAMESPACE} || \
                        kubectl create deployment ${APP_NAME} --image=${DOCKER_IMAGE}:${IMAGE_TAG} -n ${NAMESPACE}
                        
                        kubectl expose deployment ${APP_NAME} --port=80 --target-port=8080 -n ${NAMESPACE} || true
                        
                        kubectl wait --for=condition=available --timeout=300s deployment/${APP_NAME} -n ${NAMESPACE}
                    """
                }
            }
        }

        stage('Health Check') {
            steps {
                container('kubectl') {
                    sh """
                        kubectl get pods -l app=${APP_NAME} -n ${NAMESPACE}
                        echo "Application deployed successfully!"
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                container('kubectl') {
                    sh "echo 'Pipeline completed!'"
                }
            }
        }
        failure {
            script {
                container('kubectl') {
                    sh "kubectl rollout undo deployment/${APP_NAME} -n ${NAMESPACE} || true"
                }
            }
        }
        success {
            echo 'Deployment successful!'
        }
    }
}
