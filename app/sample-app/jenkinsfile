pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: golang
    image: golang:1.21
    command:
    - sleep
    args:
    - 99d
    workingDir: /workspace
    env:
    - name: CGO_ENABLED
      value: "1"
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command:
    - sleep
    args:
    - 99d
    volumeMounts:
    - name: docker-config
      mountPath: /kaniko/.docker
      readOnly: true
  - name: kubectl
    image: alpine/k8s:1.28.2
    command:
    - sleep
    args:
    - 99d
  volumes:
  - name: docker-config
    secret:
      secretName: regcred
      items:
      - key: .dockerconfigjson
        path: config.json
"""
        }
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '15'))
        timeout(time: 15, unit: 'MINUTES')
    }
    
    environment {
        APP_NAME = 'sample-app'
        NAMESPACE = 'applications'
        DOCKER_IMAGE = "deividsantos/sample-app"
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Test') {
            steps {
                container('golang') {
                    dir('app/sample-app') {
                        sh '''
                            go mod tidy
                            go mod download
                            go mod verify                            
                            go vet ./...
                            
                            echo "Running tests with coverage"
                            go test -v -coverprofile=coverage.out ./...
                            go tool cover -func=coverage.out
                            
                            echo "All tests and quality checks passed!"
                        '''
                    }
                }
            }
            post {
                failure {
                    echo 'Tests failed! Build will not continue.'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('kaniko') {
                    dir('app/sample-app') {
                        sh '''
                            echo "Building and pushing Docker image to Docker Hub..."
                            /kaniko/executor \
                                --dockerfile=Dockerfile \
                                --context=. \
                                --destination=docker.io/deividsantos/sample-app:${IMAGE_TAG} \
                                --destination=docker.io/deividsantos/sample-app:latest
                        '''
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                container('kubectl') {
                    sh '''
                        echo "Updating deployment image or creating deployment if it does not exist..."
                        kubectl set image deployment/${APP_NAME} ${APP_NAME}=${DOCKER_IMAGE}:${IMAGE_TAG} -n ${NAMESPACE} || \
                        kubectl create deployment ${APP_NAME} --image=${DOCKER_IMAGE}:${IMAGE_TAG} -n ${NAMESPACE}
                        kubectl expose deployment ${APP_NAME} --port=80 --target-port=8080 -n ${NAMESPACE} || true

                        echo "Waiting for deployment to become available..."
                        kubectl wait --for=condition=available --timeout=300s deployment/${APP_NAME} -n ${NAMESPACE}
                    '''
                }
            }
        }

        stage('Health Check') {
            steps {
                container('kubectl') {
                    sh """
                        kubectl get pods -l app=${APP_NAME} -n ${NAMESPACE}
                    """
                }
            }
        }
    }
    
    post {
        failure {
            script {
                echo 'Pipeline failed!'
                if (env.STAGE_NAME != 'Test') {
                    container('kubectl') {
                        sh "kubectl rollout undo deployment/${APP_NAME} -n ${NAMESPACE} || true"
                    }
                }
            }
        }
        success {
            echo 'All tests passed and deployment successful!'
        }
    }
}