pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '15'))
        timeout(time: 15, unit: 'MINUTES')
    }
    
    environment {
        APP_NAME = 'sample-app'
        NAMESPACE = 'applications'
        DOCKER_IMAGE = "sample-app"
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Test') {
            steps {
                dir('applications/sample-app') {
                    sh 'go mod tidy'
                    sh 'go test -v ./...'
                    sh 'go vet ./...'
                }
            }
        }

        stage('Build Docker') {
            steps {
                dir('applications/sample-app') {
                    sh "docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} ."
                    sh "docker tag ${DOCKER_IMAGE}:${IMAGE_TAG} ${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage('Deploy') {
            steps {
                sh """
                    kubectl set image deployment/${APP_NAME} ${APP_NAME}=${DOCKER_IMAGE}:${IMAGE_TAG} -n ${NAMESPACE} || \
                    kubectl create deployment ${APP_NAME} --image=${DOCKER_IMAGE}:${IMAGE_TAG} -n ${NAMESPACE}
                    
                    kubectl expose deployment ${APP_NAME} --port=80 --target-port=8080 -n ${NAMESPACE} || true
                    
                    kubectl wait --for=condition=available --timeout=300s deployment/${APP_NAME} -n ${NAMESPACE}
                """
            }
        }

        stage('Health Check') {
            steps {
                sh """
                    kubectl get pods -l app=${APP_NAME} -n ${NAMESPACE}
                    kubectl run test-${BUILD_NUMBER} --rm -i --restart=Never --image=curlimages/curl -n ${NAMESPACE} -- \
                        curl -f http://${APP_NAME}.${NAMESPACE}.svc.cluster.local/health
                """
            }
        }
    }
    
    post {
        always {
            sh "kubectl delete pod -l run=test-${BUILD_NUMBER} -n ${NAMESPACE} --ignore-not-found=true"
        }
        failure {
            sh "kubectl rollout undo deployment/${APP_NAME} -n ${NAMESPACE} || true"
        }
        success {
            echo 'Deployment successful!'
        }
    }
}
